/*20211126_성기준*/

/*잘못된 테이블 설계에 따른 테이블 구조 변경*/
--1. STROREHISTORY 테이블에 FK 삭제
ALTER TABLE STOREHISTORY DROP CONSTRAINT SH_EMSECODE_EMCODE_FK;

--2. EMPLOYEE테이블의 PK삭제
ALTER TABLE EMPLOYEE DROP CONSTRAINT EM_SECODE_CODE_PK;

--3. EMPLOYEE테이블의 PK 재지정(EM_CODE)
ALTER TABLE EMPLOYEE ADD CONSTRAINT EM_CODE_PK PRIMARY KEY (EM_CODE);

--4. STROREHISTORY 테이블에 FK 재지정
ALTER TABLE STOREHISTORY ADD CONSTRAINT SH_EMCODE_FK FOREIGN KEY (SH_EMCODE) REFERENCES EMPLOYEE(EM_CODE);

--4-1. 
ALTER TABLE STOREHISTORY RENAME COLUMN SH_EMSECODE TO SH_SECODE;
ALTER TABLE STOREHISTORY ADD CONSTRAINT SH_SECODE_FK FOREIGN KEY (SH_SECODE) REFERENCES STORES(SE_CODE);



/*직원 등록*/
-- CLIENT DATA :: SE_CODE(10003), EM_CODE(10041), EM_NAME(진짜읾)
-- TABLE   :: EMPLOYEE :: INSERT

--1. CLIENT로부터 전달된 SE_CODE가 STORES 테이블에 존재하는지 확인
SELECT COUNT(*) FROM SE WHERE SE_CODE='10003';
-- RETURN 1 >>> PROCESS 2

--2. CLIENT로부터 전달된 SE_CODE와 EM_CODE가 EMPLOYEE에 존재하는지 확인
SELECT COUNT (*) FROM EM WHERE EM_SECODE='10003'AND EM_CODE='10041';
-- RETURN 0 >> PROCESS 3

--3. EMPLOYEE에 INSERT
INSERT INTO EM(EM_SECODE, EM_CODE, EM_NAME)
        VALUES('10003','10041','진짜읾');
-- RETURN 1 >> PROCESS 4

--4.        
SELECT*FROM EM WHERE EM_CODE='10041';

COMMIT;

/*직원수정*/
-- CLIENT DATA :: EM_CODE(10041), EM_SECODE(10005), EM_NAME(진짜읾)
-- TABLE   :: EMPLOYEE :: UPDATE
--            RELATION-TABLE  :: STOREHISTORY :: NONE
            
--1. EM_CODE 존재여부 확인
SELECT COUNT(*) FROM EM WHERE EM_CODE='10041';
--RETURN 1  >> PROCESS 2

--2. EM_SECODE(=SE_CODE)가 전달되어졌다면 STORES 테이블에 데이터 존재여부 확인
SELECT COUNT(*) FROM SE WHERE SE_CODE='10005';
-- RETURN 1 >> PROCESS 3

--3. EMPLOYEE테이블에 데이터 UPDATE
--3-1 기존 데이터 확인 >> BEAN 저장
SELECT*FROM EM WHERE EM_CODE='10041';

--3-2 UPDATE
UPDATE EM SET EM_SECODE='10005' WHERE EM_CODE='10041'; 

--4. 변경된 레코드 확인
SELECT*FROM EM WHERE EM_CODE='10041';

COMMIT;

