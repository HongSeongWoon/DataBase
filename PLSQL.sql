/* Oracle PL/SQL
    SQL : TEXT --> ORACLE : PARSING --> COMPILE  --> EXCUTION
 - Block 구조  >>   ORACLE :: COMPILE 까지 진행되어 있음 :: PARAMETER값만 제외
 - 변수 사용 : 변수 정의, 사용
 - 제어 구문 : IF
 - 반복 구문 : LOOP, WHILE, FOR
 
 - PL/SQL의 Block 구조
   선언부 :: 필수 :: DECLARE  :: BLOCK 내에서 사용하고자 하는 변수 선언
                 -- 변수, 상수, CURSOR, 사용자예외처리에 대한 정의
   실행부 :: 필수 :: BEGIN ~ END
                 -- SQL(DML + QL)
                 -- 조건문, 반복문
   예외절 :: 선택 :: EXCEPTION :: 실행부 안에 포함
                 -- 예외에 대한 처리
 - PL/SQL의 Block 유형 []는 생략가능하다는 소리.
   ANONYMOUS BLOCK :: BLOCK에 대한 이름X : 1회만 실행
   [DECLARE]
   BEGIN
     실행구문;
    [EXEPTION]
   END;
   
   PROCEDURE BLOCK :: BLOCK에 대한 이름O : 재활용 가능 : PARAMETER
                   :: 엄밀히 말하면 리턴은 없지만 리턴과비슷하게 기능하게 만들수있다.
    SQL에 대한 실행
    
    PROCEDURE [PROC_NAME] IS
     [DECLARE]
    BEGIN
     실행구문;
    [EXEPTION]
    END;
   
   FUNCTION BLOCK  :: BLOCK에 대한 이름O : 재활용 가능 : RETURN, PARAMETER
                   :: 컬럼의 값을 이용하여 새로운 데이터를 만들 때
                   :: 리턴타입이 있는 경우 
    FUNCTION [FUNC_NAME] 
    RETURN DATA_TYPE
    IS
     [DECLARE]
    BEGIN
     실행구문;
    [EXEPTION]
    END;
   ++ TRIGGER BLOCK
*/
/*메뉴 등록 PROCEDURE*/
CREATE OR REPLACE PROCEDURE REGCATEGORY
/*IN OUT INOUT PARAMETER(파라미터 타입들)*/
(CCODE IN NCHAR, CNAME IN NVARCHAR2 )/*파라미터 작성한거*/
IS


BEGIN
INSERT INTO CA(CAT_CODE,CAT_NAME) VALUES(CCODE, CNAME);
COMMIT;
END;

--PROCEDURE CALL
EXECUTE REGCATEGORY('A2', '프로시저테스트13');

CREATE OR REPLACE PROCEDURE UPDCATEGORY
/*IN OUT INOUT PARAMETER(파라미터 타입들)*/
(CCODE IN NCHAR, CNAME IN NVARCHAR2 )/*파라미터 작성한거*/
IS


BEGIN
UPDATE CA SET CAT_CODE = 'A8' WHERE CAT_CODE = 'A2';
COMMIT;
END;

EXECUTE UPDCATEGORY('A8', '프로시저테스트13');
--------------------------------------------------
CREATE OR REPLACE PROCEDURE REGSTATE
(STCODE IN NUMBER, STNAME IN NVARCHAR2 )
IS


BEGIN
INSERT INTO ST(STAT_CODE,STAT_NAME) VALUES(STCODE, STNAME);
COMMIT;
END;

EXECUTE REGSTATE('4', '프로시저테스트상태');
---------------------------------------------------------
CREATE OR REPLACE PROCEDURE UPDSTATE
(STCODE IN NUMBER, STNAME IN NVARCHAR2 )
IS


BEGIN

UPDATE ST SET STAT_NAME = '9999' WHERE STAT_CODE = '4';
COMMIT;
END;

EXECUTE UPDSTATE('4', '프로시저테스트상태');
-----------------------------------------------------------------
/* PL/SQL DATA TYPE
   1. SCALAR >> 하나의 데이터 타입
    [VAR_NAME]  [DATA_TYPE]  [:= INIT_VALUE];
    %TYPE_________
    [VAR_NAME]     [TAB_NAME.COL_NAME]%TYPE
    
   2. COMPLEX >> 여러개의 데이터 타입의 묶음
   %ROWTYPE_________
   [VAR_NAME]    [TAB_NAME]%ROWTYPE
   
   
*** DBMS_OUTPUT.PUT_LINE
*/

--CA 테이블의 특정 레코드를 출력 :: WHERE [PK 설정 컬럼]
CREATE OR REPLACE PROCEDURE GETCATEGORY(
 CCODE IN CA.CAT_CODE%TYPE
) IS
    CACODE CA.CAT_CODE%TYPE;
    CANAME CA.CAT_NAME%TYPE;

BEGIN
    DBMS_OUTPUT.ENABLE;
    SELECT CAT_CODE, CAT_NAME INTO CACODE, CANAME FROM CA WHERE CAT_CODE = CCODE;
    
    DBMS_OUTPUT.PUT_LINE('CACODE : ' || CACODE);
    DBMS_OUTPUT.PUT_LINE('CACODE : ' || CANAME);
END;
SET SERVEROUTPUT ON;

EXECUTE GETCATEGORY('A8');
-----------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETCATEGORY2(
 CCODE IN CA.CAT_CODE%TYPE
) IS
    CATEGORIES CA%ROWTYPE;

BEGIN
    DBMS_OUTPUT.ENABLE;
    SELECT CAT_CODE, CAT_NAME INTO CATEGORIES.CAT_CODE, CATEGORIES.CAT_NAME FROM CA WHERE CAT_CODE = CCODE;
    
    DBMS_OUTPUT.PUT_LINE('CACODE : ' || CATEGORIES.CAT_CODE);
    DBMS_OUTPUT.PUT_LINE('CANAME : ' || CATEGORIES.CAT_NAME);
END;


EXECUTE GETCATEGORY('A8');
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETSTATE(
 SCODE IN ST.STAT_CODE%TYPE
) IS
    STCODE ST.STAT_CODE%TYPE;
    STNAME ST.STAT_NAME%TYPE;

BEGIN
    DBMS_OUTPUT.ENABLE;
    SELECT STAT_CODE, STAT_NAME INTO STCODE, STNAME FROM ST WHERE STAT_CODE = SCODE;
    
    DBMS_OUTPUT.PUT_LINE('STCODE : ' || STCODE);
    DBMS_OUTPUT.PUT_LINE('STNAME : ' || STNAME);
END;
SET SERVEROUTPUT ON;

EXECUTE GETSTATE('4');
-----------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETSTATE2(
 SCODE IN ST.STAT_CODE%TYPE
) IS
    STATES ST%ROWTYPE;

BEGIN
    DBMS_OUTPUT.ENABLE;
    SELECT STAT_CODE, STAT_NAME INTO STATES.STAT_CODE, STATES.STAT_NAME FROM ST WHERE STAT_CODE = SCODE;
    
    DBMS_OUTPUT.PUT_LINE('STCODE : ' || STATES.STAT_CODE);
    DBMS_OUTPUT.PUT_LINE('STNAME : ' || STATES.STAT_NAME);
END;
--TABLE_TYPE---------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETCA_TABLE IS
    TYPE CACODE IS TABLE OF CA.CAT_CODE%TYPE INDEX BY BINARY_INTEGER;
    TYPE CANAME IS TABLE OF NVARCHAR2(100) INDEX BY BINARY_INTEGER;
  
  CCODE CACODE;
  CNAME CANAME;  
  
  IDX BINARY_INTEGER :=0;
BEGIN
    DBMS_OUTPUT.ENABLE;
    FOR CALIST IN(SELECT CAT_CODE, CAT_NAME FROM CA) LOOP
    CCODE(IDX):=CALIST.CAT_CODE;
    CNAME(IDX):=CALIST.CAT_NAME;
    IDX:=IDX+1;
    END LOOP;
    
    FOR IDX2 IN 0..IDX-1 LOOP
     DBMS_OUTPUT.PUT_LINE('분류코드 : '||CCODE(IDX2));
     DBMS_OUTPUT.PUT_LINE('분류이름 : '||CNAME(IDX2));
    END LOOP;

END;
EXECUTE GETCA_TABLE();
---TABLE_TYPE-------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETPRCA_TABLE IS
    TYPE PRCODE IS TABLE OF PR.PR_CODE%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRNAME IS TABLE OF NVARCHAR2(20) INDEX BY BINARY_INTEGER;
    TYPE PRCOST IS TABLE OF PR.PR_COST%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRPRICE IS TABLE OF PR.PR_PRICE%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRSTOCKS IS TABLE OF PR.PR_STOCKS%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRDISCOUNT IS TABLE OF PR.PR_DISCOUNT%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRCATCODE IS TABLE OF PR.PR_CATCODE%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRSTATCODE IS TABLE OF PR.PR_STATCODE%TYPE INDEX BY BINARY_INTEGER;
  
  PCODE PRCODE;
  PNAME PRNAME;
  PCOST PRCOST;
  PPRICE PRPRICE;
  PSTOCKS PRSTOCKS;
  PDISCOUNT PRDISCOUNT;
  PCATCODE PRCATCODE;
  PSTATCODE PRSTATCODE;
  
  IDX BINARY_INTEGER :=0;
BEGIN
    DBMS_OUTPUT.ENABLE;
    FOR PRLIST IN(SELECT PR_CODE, PR_NAME, PR_COST, PR_PRICE, PR_STOCKS, PR_DISCOUNT
    , PR_CATCODE, PR_STATCODE FROM PR) LOOP
    PCODE(IDX):=PRLIST.PR_CODE;
    PNAME(IDX):=PRLIST.PR_NAME;
    PCOST(IDX):=PRLIST.PR_COST;
    PPRICE(IDX):=PRLIST.PR_PRICE;
    PSTOCKS(IDX):=PRLIST.PR_STOCKS;
    PDISCOUNT(IDX):=PRLIST.PR_DISCOUNT;
    PCATCODE(IDX):=PRLIST.PR_CATCODE;
    PSTATCODE(IDX):=PRLIST.PR_STATCODE;
    IDX:=IDX+1;
    END LOOP;
    
    FOR IDX2 IN 0..IDX-1 LOOP
     DBMS_OUTPUT.PUT_LINE('상품코드 : '||PCODE(IDX2));
     DBMS_OUTPUT.PUT_LINE('상품이름 : '||PNAME(IDX2));
     DBMS_OUTPUT.PUT_LINE('상품원가 : '||PCOST(IDX2));
     DBMS_OUTPUT.PUT_LINE('상품가격 : '||PPRICE(IDX2));
     DBMS_OUTPUT.PUT_LINE('상품재고 : '||PSTOCKS(IDX2));
     DBMS_OUTPUT.PUT_LINE('상품할인율 : '||PDISCOUNT(IDX2));
     DBMS_OUTPUT.PUT_LINE('상품분류 : '||PCATCODE(IDX2));
     DBMS_OUTPUT.PUT_LINE('상품상태코드 : '||PSTATCODE(IDX2));
    END LOOP;

END;

EXECUTE GETPRCA_TABLE();
--RECORD_TYPE-------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETCA_RECORD
    (CCODE IN CA.CAT_CODE%TYPE)
IS
    TYPE CA_RECORD IS RECORD
    (CACODE CA.CAT_CODE%TYPE, CANAME NVARCHAR2(100));
    CAT CA_RECORD;
BEGIN
    DBMS_OUTPUT.ENABLE;
    SELECT CAT_CODE, CAT_NAME INTO CAT.CACODE, CAT.CANAME FROM CA WHERE CAT_CODE = CCODE;
    DBMS_OUTPUT.PUT_LINE('분류코드 : ' || CAT.CACODE );
    DBMS_OUTPUT.PUT_LINE('분류네임 : ' || CAT.CANAME );
END;
EXECUTE GETCA_RECORD('S1');
--RECORD_TYPE------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETST_RECORD
    (SCODE IN ST.STAT_CODE%TYPE)
IS
    TYPE ST_RECORD IS RECORD
    (STCODE ST.STAT_CODE%TYPE, STNAME ST.STAT_NAME%TYPE);
    STT ST_RECORD;
BEGIN
    DBMS_OUTPUT.ENABLE;
    SELECT STAT_CODE, STAT_NAME INTO STT.STCODE, STT.STNAME FROM ST WHERE STAT_CODE = SCODE;
    DBMS_OUTPUT.PUT_LINE('상태코드 : ' || STT.STCODE );
    DBMS_OUTPUT.PUT_LINE('상태이름 : ' || STT.STNAME );
END;
EXECUTE GETST_RECORD(-4);
----TABLE OF RECORD_TYPE(시트지 만든다고 생각해)------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE GETCA_TAB_REC
IS
    TYPE CA_TR IS TABLE OF CA%ROWTYPE INDEX BY BINARY_INTEGER;
    CALIST CA_TR;
    IDX BINARY_INTEGER:=0;
BEGIN
    DBMS_OUTPUT.ENABLE;
    FOR REC IN(SELECT CAT_CODE, CAT_NAME FROM CA)LOOP
    CALIST(IDX).CAT_CODE:=REC.CAT_CODE;
    CALIST(IDX).CAT_NAME:=REC.CAT_NAME;
    IDX:=IDX+1;
    END LOOP;

    FOR CNT IN 0..IDX-1 LOOP
        DBMS_OUTPUT.PUT_LINE('분류코드 : '|| CALIST(CNT).CAT_CODE);
        DBMS_OUTPUT.PUT_LINE('분류네임 : '|| CALIST(CNT).CAT_NAME);    
    END LOOP;

END;
EXECUTE GETCA_TAB_REC;
--TABLE OF RECORD_TYPE 과제--------------------------------------------------------------------------------------------------- 
CREATE OR REPLACE PROCEDURE GETPRCAST_TAB_REC(PPPCODE IN PR.PR_CODE%TYPE)

IS
    TYPE PRCAST_RECORD IS RECORD
    (PRCODE PR.PR_CODE%TYPE,PRNAME PR.PR_NAME%TYPE
    ,PRPRICE PR.PR_PRICE%TYPE, CANAME CA.CAT_NAME%TYPE, STNAME ST.STAT_NAME%TYPE);
     
    TYPE PRCAST_TR IS TABLE OF PRCAST_RECORD INDEX BY BINARY_INTEGER;
    PRCASTLIST PRCAST_TR;
    
    
  
    IDX BINARY_INTEGER:=0;
BEGIN
    DBMS_OUTPUT.ENABLE;
    
    FOR REC IN(SELECT PR.PR_CODE AS PCODE, PR.PR_NAME AS PNAME, PR_PRICE AS PPRICE, CA.CAT_NAME AS CNAME,
                ST.STAT_NAME AS STNAME FROM PR INNER JOIN CA ON PR.PR_CATCODE = CA.CAT_CODE
                INNER JOIN ST ON PR.PR_STATCODE = ST.STAT_CODE
                WHERE PR.PR_CODE = PPPCODE)LOOP
    
    PRCASTLIST(IDX).PR_CODE:=REC.PCODE;
    PRCASTLIST(IDX).PR_NAME:=REC.PNAME;
    PRCASTLIST(IDX).PR_PRICE:=REC.PPRICE;
    PRCASTLIST(IDX).CAT_CODE:=REC.CNAME;
    PRCASTLIST(IDX).STAT_CODE:=REC.STNAME;
    
    IDX:=IDX+1;
    END LOOP;

    FOR CNT IN 0..IDX-1 LOOP
        DBMS_OUTPUT.PUT_LINE('상품코드 : '|| PRCASTLIST(IDX).PR_CODE);
        DBMS_OUTPUT.PUT_LINE('상품이름 : '|| PRCASTLIST(IDX).PR_NAME);
        DBMS_OUTPUT.PUT_LINE('상품가격 : '|| PRCASTLIST(IDX).PR_PRICE);
        DBMS_OUTPUT.PUT_LINE('분류이름 : '|| PRCASTLIST(IDX).CAT_CODE);
        DBMS_OUTPUT.PUT_LINE('상태이름 : '|| PRCASTLIST(IDX).STAT_CODE);

    END LOOP;

END;
EXECUTE GETPRCAST_TAB_REC(20001);
-------------------------저장
CREATE OR REPLACE PROCEDURE GETPRCAST_TAB_REC
IS
    TYPE PRCODE IS TABLE OF PR.PR_CODE%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRNAME IS TABLE OF PR.PR_NAME%TYPE INDEX BY BINARY_INTEGER;
    TYPE PRPRICE IS TABLE OF PR.PR_PRICE%TYPE INDEX BY BINARY_INTEGER;
    TYPE CANAME IS TABLE OF CA.CA_NAME%TYPE INDEX BY BINARY_INTEGER;
    TYPE STNAME IS TABLE OF ST.STAT_NAME%TYPE INDEX BY BINARY_INTEGER;
    
    PCODE PRCODE;
    PNAME PRNAME;
    PPRICE PRPRICE;
    CNAME CANAME;
    SNAME STNAME;
    
    IDX BINARY_INTEGER:=0;
BEGIN
    DBMS_OUTPUT.ENABLE;
    SELECT PR.PR_CODE, PR.PR_NAME, PR_PRICE, CA.CA_NAME, ST.STAT_NAME
    FROM PR INNER JOIN CA ON PR.PR_CACODE = CA.CA_CODE
            INNER JOIN ST ON PR.PR_STCODE = ST.ST_CODE
    WHERE PR.PR_CODE = PCODE;
    FOR REC IN(SELECT CAT_CODE, CAT_NAME FROM CA)LOOP
    CALIST(IDX).CAT_CODE:=REC.CAT_CODE;
    CALIST(IDX).CAT_NAME:=REC.CAT_NAME;
    IDX:=IDX+1;
    END LOOP;
 FOR CNT IN 0..IDX-1 LOOP
        DBMS_OUTPUT.PUT_LINE('분류코드 : '|| CALIST(CNT).CAT_CODE);
        DBMS_OUTPUT.PUT_LINE('분류네임 : '|| CALIST(CNT).CAT_NAME);    
    END LOOP;

END;


